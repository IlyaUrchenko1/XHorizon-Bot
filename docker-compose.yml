services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 30
    environment:
      POSTGRES_DB: xhorizon
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30
    ports:
      - "6379:6379"

  api:
    build:
      context: .
      dockerfile: app/Dockerfile
    image: xhorizon-api:latest
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Fallbacks if .env is missing
      SQLALCHEMY_DATABASE_URI: postgresql+asyncpg://postgres:postgres@db:5432/xhorizon
      JWT_SECRET_KEY: dev-secret-change-me
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: "60"
      DB_ECHO: "false"
      DB_POOL_SIZE: "5"
      DB_MAX_OVERFLOW: "10"
      DB_POOL_TIMEOUT: "30"
      HOST: 0.0.0.0
      PORT: "8000"
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    # healthcheck removed to avoid periodic /health/ calls

  worker:
    image: xhorizon-api:latest
    depends_on:
      api:
        condition: service_started
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      SQLALCHEMY_DATABASE_URI: postgresql+asyncpg://postgres:postgres@db:5432/xhorizon
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    command: ["celery", "-A", "app.workers", "worker", "-l", "info"]
    profiles: ["celery"]

  beat:
    image: xhorizon-api:latest
    depends_on:
      worker:
        condition: service_started
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      SQLALCHEMY_DATABASE_URI: postgresql+asyncpg://postgres:postgres@db:5432/xhorizon
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    command: ["celery", "-A", "app.workers", "beat", "-l", "info"]
    profiles: ["celery"]

  prometheus:
    image: prom/prometheus:v2.55.0
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    profiles: ["monitoring"]

  loki:
    image: grafana/loki:2.9.8
    command: ["-config.file=/etc/loki/config.yml"]
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/config.yml:ro
    ports:
      - "3100:3100"
    profiles: ["monitoring"]

  promtail:
    image: grafana/promtail:2.9.8
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
    depends_on:
      - loki
    profiles: ["monitoring"]

  grafana:
    image: grafana/grafana:11.1.4
    volumes:
      - ./monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki
    profiles: ["monitoring"]

volumes:
  db_data:


